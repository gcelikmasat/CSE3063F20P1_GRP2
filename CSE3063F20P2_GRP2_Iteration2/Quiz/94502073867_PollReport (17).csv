Poll Report
Report Generated:,2021-01-23 13:21:20
Topic,Meeting ID,Actual Start Time,Actual Duration (minutes),
CSE3063 OOSD Weekly Session 1 - Monday,945 0207 3867,2020-11-09 05:39:55,137
Poll Details
#,User Name,User Email,Submitted Date/Time,
1,Merve ŞAHİN,merve.calik@marun.edu.tr,"Nov 09, 2020 10:46:11","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
2,Feyza Nur Bulgurcu,feyzabulgurcu@marun.edu.tr,"Nov 09, 2020 10:45:42","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
3,Alper Dokay,alperdokay@marun.edu.tr,"Nov 09, 2020 10:42:55","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
4,Reha Üzümcü,rehauzumcu@marun.edu.tr,"Nov 09, 2020 10:43:49","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
5,Fatih Emin Öge,fatiheminoge@gmail.com,"Nov 09, 2020 10:43:01","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
6,Asem Okby,asemokby@marun.edu.tr,"Nov 09, 2020 10:42:43","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
7,Sueda Bilen,suedabilen@marun.edu.tr,"Nov 09, 2020 10:46:32","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
8,Muhammet Hasan Albayrak,mhasan17@marun.edu.tr,"Nov 09, 2020 10:43:10","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
9,Ahmet Elburuz Gürbüz,elburuzgurbuz@marun.edu.tr,"Nov 09, 2020 10:47:06","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
10,Tunahan Aydın,tunahan.aydin2707@gmail.com,"Nov 09, 2020 10:42:42","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
11,ahmet çağrı hodoğlugil,ahmethodoglugil@marun.edu.tr,"Nov 09, 2020 10:45:06","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
12,Emir Buğra Kılıç,emirkilic@marun.edu.tr,"Nov 09, 2020 10:48:20","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
13,Mahmut Hilmi Arıkmert,mahmut.hilmi@marun.edu.tr,"Nov 09, 2020 10:42:43","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
14,Veysi Öz,veyo111@gmail.com,"Nov 09, 2020 10:42:13","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
15,Sinan Burak Öztürk,snnoztrk95@hotmail.com,"Nov 09, 2020 10:42:03","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
16,Talha Bayburtlu,talhabayburtlu@marun.edu.tr,"Nov 09, 2020 10:44:10","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
17,Sedanur KARA,sedanurkara@marun.edu.tr,"Nov 09, 2020 10:47:52","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
18,Mertkan Turan,enfexial@hotmail.com,"Nov 09, 2020 10:47:19","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
19,Haytham Abdel Nabi,haytham-an@hotmail.com,"Nov 09, 2020 10:44:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
20,Süleyman Ahmet Sönmez,ssonmez@marun.edu.tr,"Nov 09, 2020 10:45:51","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
21,Abbas Göktuğ Yılmaz,goktugyilmaz58@hotmail.com,"Nov 09, 2020 10:45:34","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
22,abdulhalik şensin,sensinabdulhalik@gmail.com,"Nov 09, 2020 10:42:48","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
23,Mehmet Nusret Odabaşı,mehmetnusretodabasi@gmail.com,"Nov 09, 2020 10:44:44","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
24,Şeref Kutay Akgün,kutayakgun@marun.edu.tr,"Nov 09, 2020 10:43:21","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
25,Mahmut Salman,nasyrest1234@gmail.com,"Nov 09, 2020 10:43:55","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
26,Yunus Emre Ertunç,yunusertunc@marun.edu.tr,"Nov 09, 2020 10:42:56","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
27,TUGAY SARICI,tugaysarici@marun.edu.tr,"Nov 09, 2020 10:47:22","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,True,
28,OĞUZHAN TEZEL,tezeloguzhann@gmail.com,"Nov 09, 2020 10:47:10","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
29,Halil Demir,halildemir20@marun.edu.tr,"Nov 09, 2020 10:44:39","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
30,Emin Safa Tok,esafa.tok@gmail.com,"Nov 09, 2020 10:43:01","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
31,Hasancan Özen,hsncnozn@gmail.com,"Nov 09, 2020 10:44:02","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
32,Elif Gökpınar,elifgokpinar@marun.edu.tr,"Nov 09, 2020 10:43:30","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
33,Rümeysa ÖZTÜRK,rumeysaozturk_99@hotmail.com,"Nov 09, 2020 10:43:44","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
34,hafsa ulusal,hafsaulusal@marun.edu.tr,"Nov 09, 2020 10:44:28","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
35,Abbas KUTAY,abbaskutaymedine@gmail.com,"Nov 09, 2020 10:46:21","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
36,Mehmet Tarık Düz,tarik1327@gmail.com,"Nov 09, 2020 10:41:58","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
37,Ahmet Fatih Yuksel,ahmetyuksel@marun.edu.tr,"Nov 09, 2020 10:47:11","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
38,İnsaf Özge Berktaş,ozgeberktas@marun.edu.tr,"Nov 09, 2020 10:48:20","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
39,engin bektaş,enginbektas@marun.edu.tr,"Nov 09, 2020 10:44:38","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
40,berra mercan,berramercan_1998@hotmail.com,"Nov 09, 2020 10:42:20","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
41,Rıdvan San,ridvansan@marun.edu.tr,"Nov 09, 2020 10:44:19","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
42,İsmail Ertan Sarıhan,iertan@marun.edu.tr,"Nov 09, 2020 10:42:07","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
43,taha sarheed,tahasarheed97@gmail.com,"Nov 09, 2020 10:44:01","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
44,Muhammed Fatih Öztel,ffatihoztel@gmail.com,"Nov 09, 2020 10:46:35","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
45,serkan helvacıoğlu,serkanhl96@gmail.com,"Nov 09, 2020 10:45:00","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,True,
46,Taha Kızmaz,tahakizmaz@marun.edu.tr,"Nov 09, 2020 10:46:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
47,Erhan Yalnız,erhanyalniz0@gmail.com,"Nov 09, 2020 10:45:48","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
48,Muhammet Çetinkaya,muhammet.cetinkaya.549@hotmail.com,"Nov 09, 2020 10:43:42","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
49,Ayşe Karahasan,ayse.krhsn@hotmail.com,"Nov 09, 2020 10:43:33","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
50,Osman Erikci,erikciosmann@gmail.com,"Nov 09, 2020 10:43:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
51,Eyup Ozkul,eyupozkul@marun.edu.tr,"Nov 09, 2020 10:45:17","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
52,Alperen Kağan Kara,alperenkara@marun.edu.tr,"Nov 09, 2020 10:43:05","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
53,Arda Yiğit Kaynar,arda.yigit@marun.edu.tr,"Nov 09, 2020 10:45:12","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
54,Lara Gülsüm Şen,larasen@marun.edu.tr,"Nov 09, 2020 10:44:57","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
55,Ahmet Kerem Akpınar,polactkerem@hotmail.com,"Nov 09, 2020 10:44:19","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
56,Sinem Ceren Kontaş,sinemsezgin.sck@gmail.com,"Nov 09, 2020 10:44:02","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
57,Berkay Deniz,brkydnz89@gmail.com,"Nov 09, 2020 10:43:39","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
58,Burak Fidan,mrntlu@gmail.com,"Nov 09, 2020 10:44:26","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
59,Ahmet Harun Tokyer,haruntokyer@marun.edu.tr,"Nov 09, 2020 10:45:36","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
60,Ecem Çeşmeciler,ecemcesmeciler@marun.edu.tr,"Nov 09, 2020 10:43:24","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
61,Ayça İdil Kaya,aycaidilkaya@gmail.com,"Nov 09, 2020 10:44:04","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
62,Zeynep Ferah Akkurt,zferah@marun.edu.tr,"Nov 09, 2020 10:44:07","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
63,Mustafa Gürel,mustafagurel@marun.edu.tr,"Nov 09, 2020 10:45:13","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
64,Cafer Yükseloğlu,caferyukseloglu@hotmail.com,"Nov 09, 2020 10:46:01","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,False,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
65,Turgut Kural,turgut.kural@outlook.com,"Nov 09, 2020 10:43:31","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
66,Ali Reza Ibrahimzada,aliibrahimzada@marun.edu.tr,"Nov 09, 2020 10:45:12","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
67,Fatih Akgündüz,fatihakgunduz@marun.edu.tr,"Nov 09, 2020 10:42:14","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
68,Abdülkadir Aslan,akadirasl4n@gmail.com,"Nov 09, 2020 10:42:31","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,True,
69,Mevlüt Eren Topal,erentopal@marun.edu.tr,"Nov 09, 2020 10:42:28","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
70,Abdullah CANSIZ,abdullahcansiz@marun.edu.tr,"Nov 09, 2020 10:42:06","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
71,Şükriye Soyer,sukriyesoyer13@gmail.com,"Nov 09, 2020 10:46:10","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
72,Ahmet Hakan Şimşek,ahmet.hakan@marun.edu.tr,"Nov 09, 2020 10:42:56","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
73,ali çetinkaya,alicetinkayacwa@gmail.com,"Nov 09, 2020 10:45:05","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
74,Bilgehan Geçici,bilgehangecici@gmail.com,"Nov 09, 2020 10:43:12","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
75,Selahattin Husmen,selahattinhusmen@std.sehir.edu.tr,"Nov 09, 2020 10:47:49","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
76,Ahmet Menguc,ahmetmenguc98@gmail.com,"Nov 09, 2020 10:43:11","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
77,Ahmet Akıl,ahmetakil@marun.edu.tr,"Nov 09, 2020 10:43:22","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
78,emin kağan kadıoğlu,kagankadioglu@marun.edu.tr,"Nov 09, 2020 10:42:09","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
79,Mert Mengü,mertmengu@hotmail.com,"Nov 09, 2020 10:44:31","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
80,Ömer Öztürk,omer88999@hotmail.com,"Nov 09, 2020 10:44:51","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
81,Hayrullah Çağıl,hayrullahcagil@marun.edu.tr,"Nov 09, 2020 10:45:35","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
82,Mikail Torun,mikailtorun.kfl@gmail.com,"Nov 09, 2020 10:44:45","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
83,Cenk Kaan Kanar,cenkkaankanar99@hotmail.com,"Nov 09, 2020 10:44:36","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
84,Hüseyin Demir,huseyindemir20@marun.edu.tr,"Nov 09, 2020 10:46:41","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
85,Mümin Kocamaz,muminkocamaz@marun.edu.tr,"Nov 09, 2020 10:47:02","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
86,Erdem Ağca,erdemagca@yandex.com,"Nov 09, 2020 10:44:53","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
87,Ahmet Faruk Yılmaz,ahmetfaruk17@marun.edu.tr,"Nov 09, 2020 10:44:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
88,Zekeriya Batuhan Karataş,batuhankaratas@marun.edu.tr,"Nov 09, 2020 10:47:37","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
89,Fatih Bas,fatihbas17@marun.edu.tr,"Nov 09, 2020 10:44:22","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
90,Harun SARI,harunsari2303@gmail.com,"Nov 09, 2020 10:45:58","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
91,Ubeydullah Günay,ubeydullahgunay@gmail.com,"Nov 09, 2020 10:44:32","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
92,Rabiul Islam,ri.sumon@hotmail.com,"Nov 09, 2020 10:43:13","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
93,Umer Selmani,Umerselmani@outlook.com,"Nov 09, 2020 10:42:15","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
94,Kadir Acun,kadiracun@marun.edu.tr,"Nov 09, 2020 10:44:18","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
95,Ezgi Doğruer,ezgidogruer@marun.edu.tr,"Nov 09, 2020 10:43:46","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
96,Berk Yıldız,berkyildiz@marun.edu.tr,"Nov 09, 2020 10:42:27","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
97,ÖMER ERKAN,omererkan@marun.edu.tr,"Nov 09, 2020 10:43:35","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
98,esraa turky,esraaturky@marun.edu.tr,"Nov 09, 2020 10:45:05","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
99,Ahmet Emirhan Bakkal,ahmet.emirhan@marun.edu.tr,"Nov 09, 2020 10:44:29","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
100,Yasin Özdemir,yasinozdemir16@marun.edu.tr,"Nov 09, 2020 10:42:28","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
101,Amela Karmaj,amelakarmaj@marun.edu.tr,"Nov 09, 2020 10:44:38","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
102,Emre Okul,emreokul@marun.edu.tr,"Nov 09, 2020 10:44:25","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
103,hamiorak@marun.edu.tr,hamiorak@marun.edu.tr,"Nov 09, 2020 10:43:12","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
104,Eymen Topçuoğlu,eymentopcuoglu52@gmail.com,"Nov 09, 2020 10:44:25","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
105,Efe Berke Erkeskin,berkeerkeskin@marun.edu.tr,"Nov 09, 2020 10:44:07","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
106,Umut Bayram,umutbayram@marun.edu.tr,"Nov 09, 2020 10:43:15","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
107,Ali Onur Aslan,ali.onur@marun.edu.tr,"Nov 09, 2020 10:43:56","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
108,yusuf talha erdem,talhayusuf@marun.edu.tr,"Nov 09, 2020 10:43:18","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
109,Ayberk Altuntabak,altuntabakayberk@gmail.com,"Nov 09, 2020 10:41:56","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
110,Ahmet Gezmişoğlu,ahmetgezmisoglu@marun.edu.tr,"Nov 09, 2020 10:44:06","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
111,Güneş Yüzak,gunesyuzak@marun.edu.tr,"Nov 09, 2020 10:43:58","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
112,Erdem Açıldı,erdemacildi@gmail.com,"Nov 09, 2020 10:42:55","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,False,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,False,
113,Nurhande Akyüz,nurhandeakyuz@marun.edu.tr,"Nov 09, 2020 10:45:33","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
114,M.Etka Uzun,etkauzun@marun.edu.tr,"Nov 09, 2020 10:43:44","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
115,Mehmet Ali Gözükızıl,mehmetgozukizil@marun.edu.tr,"Nov 09, 2020 10:45:04","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
116,Khaled Yassen,khaledmohamed@marun.edu.tr,"Nov 09, 2020 10:44:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
117,Elif Sünnetci,elifsunnetci@marun.edu.tr,"Nov 09, 2020 10:43:54","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
118,Koray Emre Şenel,koraysenel@marun.edu.tr,"Nov 09, 2020 10:45:03","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
119,Büşra Ağdacı,agdacibusra@gmail.com,"Nov 09, 2020 10:47:02","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
120,Taha Enes Uzun,tahauzun@marun.edu.tr,"Nov 09, 2020 10:42:46","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
121,Ali Anıl Reyhan,anilreyhan@marun.edu.tr,"Nov 09, 2020 10:43:01","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
122,Bilal Tan,bilaltanw@gmail.com,"Nov 09, 2020 10:47:47","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
123,Farouk Tijjani,faroukmohammed2019@std.sehir.edu.tr,"Nov 09, 2020 10:44:18","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,True,
124,Zehra Kuru,zehrakuru@marun.edu.tr,"Nov 09, 2020 10:46:49","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
125,Mehmet Yilmaz,mehmetyilmaz8668@gmail.com,"Nov 09, 2020 10:42:02","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,False,Is-a relation is implemented by composition in OO programming.,True,
126,Huzeyfe Ayaz,huzeyfeayaz23@gmail.com,"Nov 09, 2020 10:46:45","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
127,Taha Cevher Naneci,tahananeci@marun.edu.tr,"Nov 09, 2020 10:48:08","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
128,Taha Üzümcü,taha.tetsu@gmail.com,"Nov 09, 2020 10:43:50","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
129,Oğuzhan Toker,oguzhantoker@marun.edu.tr,"Nov 09, 2020 10:42:46","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
130,Gökberk Çelikmasat,gokberkcelikmasat@marun.edu.tr,"Nov 09, 2020 10:44:07","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
131,Aydın DUYGU,aydinduyku@marun.edu.tr,"Nov 09, 2020 10:42:20","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
132,Yunus Stahlschmidt,yunusstahlschmidt@marun.edu.tr,"Nov 09, 2020 10:47:01","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
133,İrem Saygin,iremsaygin@marun.edu.tr,"Nov 09, 2020 10:45:16","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
134,Muhammed Enes Aktürk,menesakturk999@gmail.com,"Nov 09, 2020 10:42:43","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
135,Muhammad Ismail,muhammadismail@std.sehir.edu.tr,"Nov 09, 2020 10:46:18","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
136,Sevdenur Genç,sevdenurgenc@std.sehir.edu.tr,"Nov 09, 2020 10:45:23","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
137,abdullah emre aydemir,emreaydemir@marun.edu.tr,"Nov 09, 2020 10:44:25","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
138,diala jubeh,dialajj@gmail.com,"Nov 09, 2020 10:44:45","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
139,Ahmad Asaad,ahmadasaad@marun.edu.tr,"Nov 09, 2020 10:44:36","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
140,Yunus Yıldırım,yunus.yildirim@marun.edu.tr,"Nov 09, 2020 10:44:15","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
141,Orhan Fatih Bayazıt,fatihbayazit@marun.edu.tr,"Nov 09, 2020 10:46:24","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
142,berke şahin,berkesahin@marun.edu.tr,"Nov 09, 2020 10:48:20","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
143,Muhammet Yasin Tufan,mtufan@marun.edu.tr,"Nov 09, 2020 10:45:49","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
144,Taylan Rojen Döğer,totalwartaylan@gmail.com,"Nov 09, 2020 10:44:43","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
145,Berk Engin,berkengin@marun.edu.tr,"Nov 09, 2020 10:44:30","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
146,Melik Çağan Oduncuoğlu,caganoduncuoglu@marun.edu.tr,"Nov 09, 2020 10:43:33","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
147,Sameeh N O Kunbargi,sameehkunbargi@marun.edu.tr,"Nov 09, 2020 10:44:35","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
148,Ahmet TURGUT,aturgut@marun.edu.tr,"Nov 09, 2020 10:45:01","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
149,sinem onal,sinemonal@std.sehir.edu.tr,"Nov 09, 2020 10:44:42","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
150,mehmet soykan mutlu,mehmetsoykanmutlu@gmail.com,"Nov 09, 2020 10:42:38","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
151,Ahmet Hamza Demir,ahmet.hamza@marun.edu.tr,"Nov 09, 2020 10:44:29","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
152,Muhammed Raşit Ayaz,rasitayaz@marun.edu.tr,"Nov 09, 2020 10:44:03","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
153,Can Karatepe,can.karatepe@marun.edu.tr,"Nov 09, 2020 10:46:02","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
154,Büşra Börekci,busraborekci51@gmail.com,"Nov 09, 2020 10:47:32","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
155,Ahmet Onat Özalan,aozalan70@hotmail.com,"Nov 09, 2020 10:44:25","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
156,Furkan Akman,furkanakman@yaani.com,"Nov 09, 2020 10:43:49","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
157,Vahap Gözenelioğlu,vahapgozenelioglu@marun.edu.tr,"Nov 09, 2020 10:44:26","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
158,Zeynep Alıcı,aliciizeynep@gmail.com,"Nov 09, 2020 10:43:21","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
159,Ali Batuhan Yamanarslan,batuhanyamanarslan@marun.edu.tr,"Nov 09, 2020 10:45:20","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
160,Anıl Şenay,anilsenay@marun.edu.tr,"Nov 09, 2020 10:43:53","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
161,BELGİN TAŞTAN,belgintastan@marun.edu.tr,"Nov 09, 2020 10:46:18","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
162,Merve Rana Kızıl,ranakizil@marun.edu.tr,"Nov 09, 2020 10:44:07","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
163,Edanur Öztürk,edanur.ozturk@marun.edu.tr,"Nov 09, 2020 10:46:14","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
164,Ozan Yerli,ozanyerli@marun.edu.tr,"Nov 09, 2020 10:43:01","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
165,Mehmet Ali Yüksel,mehmetali864@marun.edu.tr,"Nov 09, 2020 10:44:38","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
166,Ahmet Önkol,ahmetonkol@marun.edu.tr,"Nov 09, 2020 10:48:16","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
167,Zülküf Orhun Özkaya,orhunozkaya@marun.edu.tr,"Nov 09, 2020 10:45:03","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
168,Hamza Türkmen,hamzaturkmen@marun.edu.tr,"Nov 09, 2020 10:41:52","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
169,Muhammet Kürşat Açıkgöz,kursatacikgoz@marun.edu.tr,"Nov 09, 2020 10:46:21","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
170,Mustafa Kibaroğlu,mkibaroglu@marun.edu.tr,"Nov 09, 2020 10:44:29","In inheritance, private methods of the superclass is not included in the subclass.",False,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
171,Aykut Başyiğit,aykutbasyigit@marun.edu.tr,"Nov 09, 2020 10:46:53","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
172,Shahzodakhon Rustamova,shahzodakhon.r@gmail.com,"Nov 09, 2020 10:43:28","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
173,Beyza Aydoğan,beyzaaydogan@marun.edu.tr,"Nov 09, 2020 10:47:00","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
174,Zeynep Naz Akyokuş,zeynep@akyokus.com,"Nov 09, 2020 10:43:27","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,False,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,False,
175,Enes Garip,enesgarip@marun.edu.tr,"Nov 09, 2020 10:43:28","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
176,isra Nur Alperen,israalperen@marun.edu.tr,"Nov 09, 2020 10:44:57","In inheritance, private methods of the superclass is not included in the subclass.",True,Has-a relation is implemented by using inheritance in OO programming.,True,There are two types of relationships in object oriented programming. Is-a relation and has-a relation.  Classes and objects are organized in a large software by using these relations.,True,Account <- SavingsAccount example shows is-a relation. This means that SavingAccount inherits from Account class. In other words Account class is a generalization of SavingsAccount class.,True,Is-a relation is implemented by composition in OO programming.,True,
177,Merve ŞAHİN,merve.calik@marun.edu.tr,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
178,Feyza Nur Bulgurcu,feyzabulgurcu@marun.edu.tr,"Nov 09, 2020 09:51:29",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
179,Alper Dokay,alperdokay@marun.edu.tr,"Nov 09, 2020 09:50:33",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
180,Reha Üzümcü,rehauzumcu@marun.edu.tr,"Nov 09, 2020 09:52:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
181,Fatih Emin Öge,fatiheminoge@gmail.com,"Nov 09, 2020 09:49:59",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
182,Asem Okby,asemokby@marun.edu.tr,"Nov 09, 2020 09:52:57",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
183,Sueda Bilen,suedabilen@marun.edu.tr,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
184,Muhammet Hasan Albayrak,mhasan17@marun.edu.tr,"Nov 09, 2020 09:48:38",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
185,Ahmet Elburuz Gürbüz,elburuzgurbuz@marun.edu.tr,"Nov 09, 2020 09:51:25",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
186,Tunahan Aydın,tunahan.aydin2707@gmail.com,"Nov 09, 2020 09:51:59",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
187,ahmet çağrı hodoğlugil,ahmethodoglugil@marun.edu.tr,"Nov 09, 2020 09:52:05",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
188,Emir Buğra Kılıç,emirkilic@marun.edu.tr,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
189,Mahmut Hilmi Arıkmert,mahmut.hilmi@marun.edu.tr,"Nov 09, 2020 09:51:02",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
190,Veysi Öz,veyo111@gmail.com,"Nov 09, 2020 09:47:57",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
191,Sinan Burak Öztürk,snnoztrk95@hotmail.com,"Nov 09, 2020 09:47:08",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
192,Talha Bayburtlu,talhabayburtlu@marun.edu.tr,"Nov 09, 2020 09:50:26",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
193,Sedanur KARA,sedanurkara@marun.edu.tr,"Nov 09, 2020 09:54:17",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
194,Mertkan Turan,enfexial@hotmail.com,"Nov 09, 2020 09:46:25",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
195,Haytham Abdel Nabi,haytham-an@hotmail.com,"Nov 09, 2020 09:53:45",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
196,Süleyman Ahmet Sönmez,ssonmez@marun.edu.tr,"Nov 09, 2020 09:51:05",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
197,abdulhalik şensin,sensinabdulhalik@gmail.com,"Nov 09, 2020 09:53:58",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
198,Mehmet Nusret Odabaşı,mehmetnusretodabasi@gmail.com,"Nov 09, 2020 09:51:34",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
199,Mahmut Salman,nasyrest1234@gmail.com,"Nov 09, 2020 09:48:28",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
200,Yunus Emre Ertunç,yunusertunc@marun.edu.tr,"Nov 09, 2020 09:52:03",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
201,OĞUZHAN TEZEL,tezeloguzhann@gmail.com,"Nov 09, 2020 09:53:49",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
202,Halil Demir,halildemir20@marun.edu.tr,"Nov 09, 2020 09:53:11",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
203,Emin Safa Tok,esafa.tok@gmail.com,"Nov 09, 2020 09:48:03",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
204,Hasancan Özen,hsncnozn@gmail.com,"Nov 09, 2020 09:50:16",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
205,Elif Gökpınar,elifgokpinar@marun.edu.tr,"Nov 09, 2020 09:50:15",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
206,Rümeysa ÖZTÜRK,rumeysaozturk_99@hotmail.com,"Nov 09, 2020 09:52:21",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
207,hafsa ulusal,hafsaulusal@marun.edu.tr,"Nov 09, 2020 09:52:13",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
208,Abbas KUTAY,abbaskutaymedine@gmail.com,"Nov 09, 2020 09:53:17",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
209,Mehmet Tarık Düz,tarik1327@gmail.com,"Nov 09, 2020 09:50:56",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
210,Ahmet Fatih Yuksel,ahmetyuksel@marun.edu.tr,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
211,İnsaf Özge Berktaş,ozgeberktas@marun.edu.tr,"Nov 09, 2020 09:51:26",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
212,engin bektaş,enginbektas@marun.edu.tr,"Nov 09, 2020 09:52:35",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
213,berra mercan,berramercan_1998@hotmail.com,"Nov 09, 2020 09:49:36",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
214,Rıdvan San,ridvansan@marun.edu.tr,"Nov 09, 2020 09:51:30",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
215,İsmail Ertan Sarıhan,iertan@marun.edu.tr,"Nov 09, 2020 09:48:16",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
216,taha sarheed,tahasarheed97@gmail.com,"Nov 09, 2020 09:51:52",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
217,Muhammed Fatih Öztel,ffatihoztel@gmail.com,"Nov 09, 2020 09:52:30",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
218,serkan helvacıoğlu,serkanhl96@gmail.com,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
219,Taha Kızmaz,tahakizmaz@marun.edu.tr,"Nov 09, 2020 09:51:35",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
220,Erhan Yalnız,erhanyalniz0@gmail.com,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
221,Muhammet Çetinkaya,muhammet.cetinkaya.549@hotmail.com,"Nov 09, 2020 09:50:47",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
222,Ayşe Karahasan,ayse.krhsn@hotmail.com,"Nov 09, 2020 09:50:30",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
223,Osman Erikci,erikciosmann@gmail.com,"Nov 09, 2020 09:50:11",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
224,Eyup Ozkul,eyupozkul@marun.edu.tr,"Nov 09, 2020 09:49:59",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
225,Alperen Kağan Kara,alperenkara@marun.edu.tr,"Nov 09, 2020 09:51:47",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
226,Arda Yiğit Kaynar,arda.yigit@marun.edu.tr,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
227,Lara Gülsüm Şen,larasen@marun.edu.tr,"Nov 09, 2020 09:52:46",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
228,Ahmet Kerem Akpınar,polactkerem@hotmail.com,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
229,Sinem Ceren Kontaş,sinemsezgin.sck@gmail.com,"Nov 09, 2020 09:50:28",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
230,Berkay Deniz,brkydnz89@gmail.com,"Nov 09, 2020 09:51:16",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
231,Burak Fidan,mrntlu@gmail.com,"Nov 09, 2020 09:50:22",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
232,Ahmet Harun Tokyer,haruntokyer@marun.edu.tr,"Nov 09, 2020 09:50:20",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
233,Ecem Çeşmeciler,ecemcesmeciler@marun.edu.tr,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
234,Ayça İdil Kaya,aycaidilkaya@gmail.com,"Nov 09, 2020 09:53:03",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
235,Zeynep Ferah Akkurt,zferah@marun.edu.tr,"Nov 09, 2020 09:52:28",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
236,Mustafa Gürel,mustafagurel@marun.edu.tr,"Nov 09, 2020 09:52:09",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
237,Cafer Yükseloğlu,caferyukseloglu@hotmail.com,"Nov 09, 2020 09:51:49",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
238,Turgut Kural,turgut.kural@outlook.com,"Nov 09, 2020 09:49:45",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
239,Ali Reza Ibrahimzada,aliibrahimzada@marun.edu.tr,"Nov 09, 2020 09:53:47",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
240,Fatih Akgündüz,fatihakgunduz@marun.edu.tr,"Nov 09, 2020 09:48:22",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
241,Abdülkadir Aslan,akadirasl4n@gmail.com,"Nov 09, 2020 09:49:04",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
242,Mevlüt Eren Topal,erentopal@marun.edu.tr,"Nov 09, 2020 09:48:53",Which of the the following is not necessary for a system or language to be OO?,Inheritance,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
243,Abdullah CANSIZ,abdullahcansiz@marun.edu.tr,"Nov 09, 2020 09:49:49",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
244,Şükriye Soyer,sukriyesoyer13@gmail.com,"Nov 09, 2020 09:52:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
245,Ahmet Hakan Şimşek,ahmet.hakan@marun.edu.tr,"Nov 09, 2020 09:52:14",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
246,ali çetinkaya,alicetinkayacwa@gmail.com,"Nov 09, 2020 09:51:16",Which of the the following is not necessary for a system or language to be OO?,Polymorphism,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
247,Bilgehan Geçici,bilgehangecici@gmail.com,"Nov 09, 2020 09:51:51",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
248,Selahattin Husmen,selahattinhusmen@std.sehir.edu.tr,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
249,Ahmet Menguc,ahmetmenguc98@gmail.com,"Nov 09, 2020 09:51:24",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
250,Ahmet Akıl,ahmetakil@marun.edu.tr,"Nov 09, 2020 09:50:30",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
251,emin kağan kadıoğlu,kagankadioglu@marun.edu.tr,"Nov 09, 2020 09:46:58",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
252,Mert Mengü,mertmengu@hotmail.com,"Nov 09, 2020 09:49:38",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
253,Ömer Öztürk,omer88999@hotmail.com,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
254,Hayrullah Çağıl,hayrullahcagil@marun.edu.tr,"Nov 09, 2020 09:49:02",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
255,Mikail Torun,mikailtorun.kfl@gmail.com,"Nov 09, 2020 09:49:11",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
256,Cenk Kaan Kanar,cenkkaankanar99@hotmail.com,"Nov 09, 2020 09:49:57",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
257,Hüseyin Demir,huseyindemir20@marun.edu.tr,"Nov 09, 2020 09:52:39",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
258,Mümin Kocamaz,muminkocamaz@marun.edu.tr,"Nov 09, 2020 09:54:21",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
259,Erdem Ağca,erdemagca@yandex.com,"Nov 09, 2020 09:53:10",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
260,Ahmet Faruk Yılmaz,ahmetfaruk17@marun.edu.tr,"Nov 09, 2020 09:53:08",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
261,Zekeriya Batuhan Karataş,batuhankaratas@marun.edu.tr,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
262,Fatih Bas,fatihbas17@marun.edu.tr,"Nov 09, 2020 09:51:16",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
263,Harun SARI,harunsari2303@gmail.com,"Nov 09, 2020 09:52:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
264,Ubeydullah Günay,ubeydullahgunay@gmail.com,"Nov 09, 2020 09:53:14",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
265,Rabiul Islam,ri.sumon@hotmail.com,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
266,Umer Selmani,Umerselmani@outlook.com,"Nov 09, 2020 09:50:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
267,Kadir Acun,kadiracun@marun.edu.tr,"Nov 09, 2020 09:53:14",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
268,Ezgi Doğruer,ezgidogruer@marun.edu.tr,"Nov 09, 2020 09:50:46",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
269,Berk Yıldız,berkyildiz@marun.edu.tr,"Nov 09, 2020 09:48:34",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
270,ÖMER ERKAN,omererkan@marun.edu.tr,"Nov 09, 2020 09:52:13",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
271,esraa turky,esraaturky@marun.edu.tr,"Nov 09, 2020 09:49:14",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
272,Ahmet Emirhan Bakkal,ahmet.emirhan@marun.edu.tr,"Nov 09, 2020 09:53:24",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
273,Yasin Özdemir,yasinozdemir16@marun.edu.tr,"Nov 09, 2020 09:48:41",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
274,Amela Karmaj,amelakarmaj@marun.edu.tr,"Nov 09, 2020 09:53:50",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
275,Emre Okul,emreokul@marun.edu.tr,"Nov 09, 2020 09:52:02",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
276,Eymen Topçuoğlu,eymentopcuoglu52@gmail.com,"Nov 09, 2020 09:51:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
277,Efe Berke Erkeskin,berkeerkeskin@marun.edu.tr,"Nov 09, 2020 09:50:38",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
278,Umut Bayram,umutbayram@marun.edu.tr,"Nov 09, 2020 09:50:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
279,Ali Onur Aslan,ali.onur@marun.edu.tr,"Nov 09, 2020 09:50:18",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
280,yusuf talha erdem,talhayusuf@marun.edu.tr,"Nov 09, 2020 09:52:17",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
281,Ayberk Altuntabak,altuntabakayberk@gmail.com,"Nov 09, 2020 09:47:34",Which of the the following is not necessary for a system or language to be OO?,Classes,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
282,Ahmet Gezmişoğlu,ahmetgezmisoglu@marun.edu.tr,"Nov 09, 2020 09:52:15",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
283,Güneş Yüzak,gunesyuzak@marun.edu.tr,"Nov 09, 2020 09:50:20",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
284,Erdem Açıldı,erdemacildi@gmail.com,"Nov 09, 2020 09:48:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
285,Nurhande Akyüz,nurhandeakyuz@marun.edu.tr,"Nov 09, 2020 09:52:31",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
286,M.Etka Uzun,etkauzun@marun.edu.tr,"Nov 09, 2020 09:51:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
287,Mehmet Ali Gözükızıl,mehmetgozukizil@marun.edu.tr,"Nov 09, 2020 09:50:47",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
288,Khaled Yassen,khaledmohamed@marun.edu.tr,"Nov 09, 2020 09:54:31",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
289,Elif Sünnetci,elifsunnetci@marun.edu.tr,"Nov 09, 2020 09:51:25",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
290,Koray Emre Şenel,koraysenel@marun.edu.tr,"Nov 09, 2020 09:50:55",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
291,Büşra Ağdacı,agdacibusra@gmail.com,"Nov 09, 2020 09:53:36",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
292,Taha Enes Uzun,tahauzun@marun.edu.tr,"Nov 09, 2020 09:48:15",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
293,Ali Anıl Reyhan,anilreyhan@marun.edu.tr,"Nov 09, 2020 09:51:05",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
294,Bilal Tan,bilaltanw@gmail.com,"Nov 09, 2020 09:51:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
295,Farouk Tijjani,faroukmohammed2019@std.sehir.edu.tr,"Nov 09, 2020 09:54:11",Which of the the following is not necessary for a system or language to be OO?,Classes,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
296,Zehra Kuru,zehrakuru@marun.edu.tr,"Nov 09, 2020 09:52:29",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
297,Mehmet Yilmaz,mehmetyilmaz8668@gmail.com,"Nov 09, 2020 09:47:50",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
298,Huzeyfe Ayaz,huzeyfeayaz23@gmail.com,"Nov 09, 2020 09:52:22",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
299,Taha Cevher Naneci,tahananeci@marun.edu.tr,"Nov 09, 2020 09:47:14",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
300,Taha Üzümcü,taha.tetsu@gmail.com,"Nov 09, 2020 09:52:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
301,Oğuzhan Toker,oguzhantoker@marun.edu.tr,"Nov 09, 2020 09:48:26",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
302,Gökberk Çelikmasat,gokberkcelikmasat@marun.edu.tr,"Nov 09, 2020 09:53:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
303,Hakan Özer,hakanozer@marun.edu.tr,"Nov 09, 2020 09:48:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
304,Aydın DUYGU,aydinduyku@marun.edu.tr,"Nov 09, 2020 09:48:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
305,Yunus Stahlschmidt,yunusstahlschmidt@marun.edu.tr,"Nov 09, 2020 09:54:05",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
306,Alperen Köker,alperenkoker@marun.edu.tr,"Nov 09, 2020 09:50:52",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
307,İrem Saygin,iremsaygin@marun.edu.tr,"Nov 09, 2020 09:51:16",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
308,Muhammed Enes Aktürk,menesakturk999@gmail.com,"Nov 09, 2020 09:52:23",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
309,Muhammad Ismail,muhammadismail@std.sehir.edu.tr,"Nov 09, 2020 09:53:53",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
310,abdullah emre aydemir,emreaydemir@marun.edu.tr,"Nov 09, 2020 09:50:38",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
311,diala jubeh,dialajj@gmail.com,"Nov 09, 2020 09:51:23",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
312,Ahmad Asaad,ahmadasaad@marun.edu.tr,"Nov 09, 2020 09:54:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
313,Yunus Yıldırım,yunus.yildirim@marun.edu.tr,"Nov 09, 2020 09:50:21",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
314,Orhan Fatih Bayazıt,fatihbayazit@marun.edu.tr,"Nov 09, 2020 09:53:37",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
315,berke şahin,berkesahin@marun.edu.tr,"Nov 09, 2020 09:53:02",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
316,Muhammet Yasin Tufan,mtufan@marun.edu.tr,"Nov 09, 2020 09:49:53",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
317,Taylan Rojen Döğer,totalwartaylan@gmail.com,"Nov 09, 2020 09:51:32",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
318,Berk Engin,berkengin@marun.edu.tr,"Nov 09, 2020 09:52:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
319,Melik Çağan Oduncuoğlu,caganoduncuoglu@marun.edu.tr,"Nov 09, 2020 09:50:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
320,Sameeh N O Kunbargi,sameehkunbargi@marun.edu.tr,"Nov 09, 2020 09:53:08",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
321,Ahmet TURGUT,aturgut@marun.edu.tr,"Nov 09, 2020 09:52:10",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
322,sinem onal,sinemonal@std.sehir.edu.tr,"Nov 09, 2020 09:51:27",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
323,mehmet soykan mutlu,mehmetsoykanmutlu@gmail.com,"Nov 09, 2020 09:51:28",Which of the the following is not necessary for a system or language to be OO?,Classes,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
324,Ahmet Hamza Demir,ahmet.hamza@marun.edu.tr,"Nov 09, 2020 09:52:24",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
325,Muhammed Raşit Ayaz,rasitayaz@marun.edu.tr,"Nov 09, 2020 09:53:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
326,Can Karatepe,can.karatepe@marun.edu.tr,"Nov 09, 2020 09:50:02",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
327,Büşra Börekci,busraborekci51@gmail.com,"Nov 09, 2020 09:53:43",Which of the the following is not necessary for a system or language to be OO?,Identity,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,False,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
328,Ahmet Onat Özalan,aozalan70@hotmail.com,"Nov 09, 2020 09:50:26",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
329,Furkan Akman,furkanakman@yaani.com,"Nov 09, 2020 09:52:01",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
330,Vahap Gözenelioğlu,vahapgozenelioglu@marun.edu.tr,"Nov 09, 2020 09:52:52",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
331,Zeynep Alıcı,aliciizeynep@gmail.com,"Nov 09, 2020 09:51:11",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
332,Ali Batuhan Yamanarslan,batuhanyamanarslan@marun.edu.tr,"Nov 09, 2020 09:46:53",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
333,Anıl Şenay,anilsenay@marun.edu.tr,"Nov 09, 2020 09:50:52",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
334,BELGİN TAŞTAN,belgintastan@marun.edu.tr,"Nov 09, 2020 09:52:25",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
335,Merve Rana Kızıl,ranakizil@marun.edu.tr,"Nov 09, 2020 09:52:40",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
336,Edanur Öztürk,edanur.ozturk@marun.edu.tr,"Nov 09, 2020 09:52:53",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
337,Ozan Yerli,ozanyerli@marun.edu.tr,"Nov 09, 2020 09:50:44",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
338,Mehmet Ali Yüksel,mehmetali864@marun.edu.tr,"Nov 09, 2020 09:49:51",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
339,Ahmet Önkol,ahmetonkol@marun.edu.tr,"Nov 09, 2020 09:52:46",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
340,Zülküf Orhun Özkaya,orhunozkaya@marun.edu.tr,"Nov 09, 2020 09:51:48",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
341,Hamza Türkmen,hamzaturkmen@marun.edu.tr,"Nov 09, 2020 09:48:13",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,False,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
342,Muhammet Kürşat Açıkgöz,kursatacikgoz@marun.edu.tr,"Nov 09, 2020 09:52:38",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
343,Mustafa Kibaroğlu,mkibaroglu@marun.edu.tr,"Nov 09, 2020 09:49:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,False,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
344,Aykut Başyiğit,aykutbasyigit@marun.edu.tr,"Nov 09, 2020 09:52:49",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,True,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
345,Shahzodakhon Rustamova,shahzodakhon.r@gmail.com,"Nov 09, 2020 09:54:06",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
346,Beyza Aydoğan,beyzaaydogan@marun.edu.tr,"Nov 09, 2020 09:52:01",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,True,
347,Zeynep Naz Akyokuş,zeynep@akyokus.com,"Nov 09, 2020 09:53:49",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,False,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,True,In order to override a method it has to be abstract.,False,
348,Enes Garip,enesgarip@marun.edu.tr,"Nov 09, 2020 09:49:58",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,False,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,False,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,False,
349,isra Nur Alperen,israalperen@marun.edu.tr,"Nov 09, 2020 09:50:52",Which of the the following is not necessary for a system or language to be OO?,Garbage Collection,Abstract classes can be instantiated.,True,For Polymorphism in Java we need to have at least an interface and several classes that implements this interface by by providing implementation to the polymorphic method in different ways.,True,Dynamic Binding occurs when decision about which method to run can only be made at run time,True,Dynamic binding is directly related to the polymorphism,True,We need to avoid switch-case / if-else statements to vary between different types. Instead we need to use polymorphism. This will lead to easy maintenance and  extension of the code.,True,You can never instantiate a class that inherits from abstract class,False,Dynamic binding happens when is more than one possible polymorphic method that could be run among the type of the variable and its subclasses,True,For Polymorphism in Java we need to have at least an abstract method in an abstract class and several classes that inherits from this abstract class by implementing the abstract method in different ways.,False,In order to override a method it has to be abstract.,True,
350,Merve ŞAHİN,merve.calik@marun.edu.tr,"Nov 09, 2020 09:38:05",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
351,Feyza Nur Bulgurcu,feyzabulgurcu@marun.edu.tr,"Nov 09, 2020 09:37:43",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
352,Alper Dokay,alperdokay@marun.edu.tr,"Nov 09, 2020 09:36:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,protected,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
353,Reha Üzümcü,rehauzumcu@marun.edu.tr,"Nov 09, 2020 09:37:23",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
354,Fatih Emin Öge,fatiheminoge@gmail.com,"Nov 09, 2020 09:36:14",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
355,Asem Okby,asemokby@marun.edu.tr,"Nov 09, 2020 09:37:53",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
356,Sueda Bilen,suedabilen@marun.edu.tr,"Nov 09, 2020 09:37:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
357,Muhammet Hasan Albayrak,mhasan17@marun.edu.tr,"Nov 09, 2020 09:35:54",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
358,Ahmet Elburuz Gürbüz,elburuzgurbuz@marun.edu.tr,"Nov 09, 2020 09:36:46",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
359,Tunahan Aydın,tunahan.aydin2707@gmail.com,"Nov 09, 2020 09:36:46",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
360,ahmet çağrı hodoğlugil,ahmethodoglugil@marun.edu.tr,"Nov 09, 2020 09:36:31",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
361,Mahmut Hilmi Arıkmert,mahmut.hilmi@marun.edu.tr,"Nov 09, 2020 09:36:37",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
362,Veysi Öz,veyo111@gmail.com,"Nov 09, 2020 09:36:29",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
363,Sinan Burak Öztürk,snnoztrk95@hotmail.com,"Nov 09, 2020 09:35:37",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
364,Talha Bayburtlu,talhabayburtlu@marun.edu.tr,"Nov 09, 2020 09:36:21",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
365,Sedanur KARA,sedanurkara@marun.edu.tr,"Nov 09, 2020 09:38:36",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
366,Mertkan Turan,enfexial@hotmail.com,"Nov 09, 2020 09:36:05",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
367,Haytham Abdel Nabi,haytham-an@hotmail.com,"Nov 09, 2020 09:38:24",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
368,Süleyman Ahmet Sönmez,ssonmez@marun.edu.tr,"Nov 09, 2020 09:35:49",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
369,Abbas Göktuğ Yılmaz,goktugyilmaz58@hotmail.com,"Nov 09, 2020 09:36:24",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,Object,Which one is not a required property of OO languages?,Polymorphism,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
370,abdulhalik şensin,sensinabdulhalik@gmail.com,"Nov 09, 2020 09:38:53",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Inheritance,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
371,Mehmet Nusret Odabaşı,mehmetnusretodabasi@gmail.com,"Nov 09, 2020 09:38:36",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
372,Yunus Emre Ertunç,yunusertunc@marun.edu.tr,"Nov 09, 2020 09:37:07",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
373,TUGAY SARICI,tugaysarici@marun.edu.tr,"Nov 09, 2020 09:36:28",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
374,OĞUZHAN TEZEL,tezeloguzhann@gmail.com,"Nov 09, 2020 09:36:28",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
375,Halil Demir,halildemir20@marun.edu.tr,"Nov 09, 2020 09:37:13",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
376,Emin Safa Tok,esafa.tok@gmail.com,"Nov 09, 2020 09:36:39",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,protected,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
377,Hasancan Özen,hsncnozn@gmail.com,"Nov 09, 2020 09:36:53",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UC,
378,Elif Gökpınar,elifgokpinar@marun.edu.tr,"Nov 09, 2020 09:36:08",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
379,Rümeysa ÖZTÜRK,rumeysaozturk_99@hotmail.com,"Nov 09, 2020 09:38:03",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Encapsulation,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
380,hafsa ulusal,hafsaulusal@marun.edu.tr,"Nov 09, 2020 09:38:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
381,Abbas KUTAY,abbaskutaymedine@gmail.com,"Nov 09, 2020 09:37:33",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
382,Ahmet Fatih Yuksel,ahmetyuksel@marun.edu.tr,"Nov 09, 2020 09:36:53",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
383,İnsaf Özge Berktaş,ozgeberktas@marun.edu.tr,"Nov 09, 2020 09:38:01",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
384,engin bektaş,enginbektas@marun.edu.tr,"Nov 09, 2020 09:36:58",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
385,berra mercan,berramercan_1998@hotmail.com,"Nov 09, 2020 09:36:54",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
386,Rıdvan San,ridvansan@marun.edu.tr,"Nov 09, 2020 09:36:21",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
387,taha sarheed,tahasarheed97@gmail.com,"Nov 09, 2020 09:37:28",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
388,Muhammed Fatih Öztel,ffatihoztel@gmail.com,"Nov 09, 2020 09:36:45",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
389,serkan helvacıoğlu,serkanhl96@gmail.com,"Nov 09, 2020 09:37:03",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
390,Taha Kızmaz,tahakizmaz@marun.edu.tr,"Nov 09, 2020 09:38:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
391,Erhan Yalnız,erhanyalniz0@gmail.com,"Nov 09, 2020 09:38:20",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
392,Muhammet Çetinkaya,muhammet.cetinkaya.549@hotmail.com,"Nov 09, 2020 09:37:37",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
393,Ayşe Karahasan,ayse.krhsn@hotmail.com,"Nov 09, 2020 09:36:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
394,Osman Erikci,erikciosmann@gmail.com,"Nov 09, 2020 09:36:24",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
395,Eyup Ozkul,eyupozkul@marun.edu.tr,"Nov 09, 2020 09:36:09",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
396,Alperen Kağan Kara,alperenkara@marun.edu.tr,"Nov 09, 2020 09:37:20",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
397,Arda Yiğit Kaynar,arda.yigit@marun.edu.tr,"Nov 09, 2020 09:37:58",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
398,Lara Gülsüm Şen,larasen@marun.edu.tr,"Nov 09, 2020 09:36:03",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
399,Ahmet Kerem Akpınar,polactkerem@hotmail.com,"Nov 09, 2020 09:37:32",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
400,Sinem Ceren Kontaş,sinemsezgin.sck@gmail.com,"Nov 09, 2020 09:36:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
401,Berkay Deniz,brkydnz89@gmail.com,"Nov 09, 2020 09:37:11",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
402,Burak Fidan,mrntlu@gmail.com,"Nov 09, 2020 09:36:13",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
403,Ahmet Harun Tokyer,haruntokyer@marun.edu.tr,"Nov 09, 2020 09:38:01",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
404,Ecem Çeşmeciler,ecemcesmeciler@marun.edu.tr,"Nov 09, 2020 09:38:39",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
405,Ayça İdil Kaya,aycaidilkaya@gmail.com,"Nov 09, 2020 09:38:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
406,Kutay Akgün,seref.kutay.akgun@gmail.com,"Nov 09, 2020 09:36:12",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
407,Zeynep Ferah Akkurt,zferah@marun.edu.tr,"Nov 09, 2020 09:37:07",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,protected,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
408,Mustafa Gürel,mustafagurel@marun.edu.tr,"Nov 09, 2020 09:38:19",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
409,Cafer Yükseloğlu,caferyukseloglu@hotmail.com,"Nov 09, 2020 09:37:51",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
410,Turgut Kural,turgut.kural@outlook.com,"Nov 09, 2020 09:35:55",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
411,Ali Reza Ibrahimzada,aliibrahimzada@marun.edu.tr,"Nov 09, 2020 09:38:10",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
412,Fatih Akgündüz,fatihakgunduz@marun.edu.tr,"Nov 09, 2020 09:36:10",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
413,Abdülkadir Aslan,akadirasl4n@gmail.com,"Nov 09, 2020 09:36:55",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Encapsulation,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
414,Abdullah CANSIZ,abdullahcansiz@marun.edu.tr,"Nov 09, 2020 09:36:52",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,protected,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
415,Şükriye Soyer,sukriyesoyer13@gmail.com,"Nov 09, 2020 09:37:00",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
416,Ahmet Hakan Şimşek,ahmet.hakan@marun.edu.tr,"Nov 09, 2020 09:36:57",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
417,ali çetinkaya,alicetinkayacwa@gmail.com,"Nov 09, 2020 09:37:37",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
418,Bilgehan Geçici,bilgehangecici@gmail.com,"Nov 09, 2020 09:37:16",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
419,Selahattin Husmen,selahattinhusmen@std.sehir.edu.tr,"Nov 09, 2020 09:38:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
420,Ahmet Menguc,ahmetmenguc98@gmail.com,"Nov 09, 2020 09:38:28",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
421,Ahmet Akıl,ahmetakil@marun.edu.tr,"Nov 09, 2020 09:36:28",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
422,emin kağan kadıoğlu,kagankadioglu@marun.edu.tr,"Nov 09, 2020 09:36:18",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Polymorphism,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
423,Mert Mengü,mertmengu@hotmail.com,"Nov 09, 2020 09:37:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
424,Ömer Öztürk,omer88999@hotmail.com,"Nov 09, 2020 09:38:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
425,Hayrullah Çağıl,hayrullahcagil@marun.edu.tr,"Nov 09, 2020 09:37:19",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Encapsulation,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
426,Mikail Torun,mikailtorun.kfl@gmail.com,"Nov 09, 2020 09:36:47",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
427,Cenk Kaan Kanar,cenkkaankanar99@hotmail.com,"Nov 09, 2020 09:36:54",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
428,Hüseyin Demir,huseyindemir20@marun.edu.tr,"Nov 09, 2020 09:37:17",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
429,Erdem Ağca,erdemagca@yandex.com,"Nov 09, 2020 09:38:52",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
430,Ahmet Faruk Yılmaz,ahmetfaruk17@marun.edu.tr,"Nov 09, 2020 09:37:51",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
431,Zekeriya Batuhan Karataş,batuhankaratas@marun.edu.tr,"Nov 09, 2020 09:38:34",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
432,Fatih Bas,fatihbas17@marun.edu.tr,"Nov 09, 2020 09:36:34",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
433,Harun SARI,harunsari2303@gmail.com,"Nov 09, 2020 09:38:21",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
434,Ubeydullah Günay,ubeydullahgunay@gmail.com,"Nov 09, 2020 09:37:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
435,Rabiul Islam,ri.sumon@hotmail.com,"Nov 09, 2020 09:36:01",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
436,Kadir Acun,kadiracun@marun.edu.tr,"Nov 09, 2020 09:37:26",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
437,Ezgi Doğruer,ezgidogruer@marun.edu.tr,"Nov 09, 2020 09:35:41",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
438,Berk Yıldız,berkyildiz@marun.edu.tr,"Nov 09, 2020 09:36:09",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
439,ÖMER ERKAN,omererkan@marun.edu.tr,"Nov 09, 2020 09:36:41",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
440,esraa turky,esraaturky@marun.edu.tr,"Nov 09, 2020 09:36:03",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
441,Ahmet Emirhan Bakkal,ahmet.emirhan@marun.edu.tr,"Nov 09, 2020 09:37:40",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
442,Yasin Özdemir,yasinozdemir16@marun.edu.tr,"Nov 09, 2020 09:35:51",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
443,Amela Karmaj,amelakarmaj@marun.edu.tr,"Nov 09, 2020 09:38:15",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
444,Emre Okul,emreokul@marun.edu.tr,"Nov 09, 2020 09:38:34",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
445,hamiorak@marun.edu.tr,hamiorak@marun.edu.tr,"Nov 09, 2020 09:37:11",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
446,Eymen Topçuoğlu,eymentopcuoglu52@gmail.com,"Nov 09, 2020 09:37:00",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
447,Efe Berke Erkeskin,berkeerkeskin@marun.edu.tr,"Nov 09, 2020 09:36:32",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
448,Umut Bayram,umutbayram@marun.edu.tr,"Nov 09, 2020 09:36:33",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
449,Ali Onur Aslan,ali.onur@marun.edu.tr,"Nov 09, 2020 09:37:13",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
450,yusuf talha erdem,talhayusuf@marun.edu.tr,"Nov 09, 2020 09:37:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
451,Ayberk Altuntabak,altuntabakayberk@gmail.com,"Nov 09, 2020 09:35:49",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
452,Ahmet Gezmişoğlu,ahmetgezmisoglu@marun.edu.tr,"Nov 09, 2020 09:38:02",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Encapsulation,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
453,Güneş Yüzak,gunesyuzak@marun.edu.tr,"Nov 09, 2020 09:37:22",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
454,Nurhande Akyüz,nurhandeakyuz@marun.edu.tr,"Nov 09, 2020 09:37:23",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
455,M.Etka Uzun,etkauzun@marun.edu.tr,"Nov 09, 2020 09:36:16",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
456,Mehmet Ali Gözükızıl,mehmetgozukizil@marun.edu.tr,"Nov 09, 2020 09:36:54",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
457,Khaled Yassen,khaledmohamed@marun.edu.tr,"Nov 09, 2020 09:37:31",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
458,Elif Sünnetci,elifsunnetci@marun.edu.tr,"Nov 09, 2020 09:36:17",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
459,Koray Emre Şenel,koraysenel@marun.edu.tr,"Nov 09, 2020 09:36:57",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
460,Büşra Ağdacı,agdacibusra@gmail.com,"Nov 09, 2020 09:38:20",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
461,Taha Enes Uzun,tahauzun@marun.edu.tr,"Nov 09, 2020 09:36:08",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
462,Ali Anıl Reyhan,anilreyhan@marun.edu.tr,"Nov 09, 2020 09:38:48",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
463,Bilal Tan,bilaltanw@gmail.com,"Nov 09, 2020 09:37:06",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
464,Farouk Tijjani,faroukmohammed2019@std.sehir.edu.tr,"Nov 09, 2020 09:38:29",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Polymorphism,"Based on the Java naming convention, which one is a good name for a class ?",U1,
465,Zehra Kuru,zehrakuru@marun.edu.tr,"Nov 09, 2020 09:37:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
466,Mehmet Yilmaz,mehmetyilmaz8668@gmail.com,"Nov 09, 2020 09:36:21",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
467,Huzeyfe Ayaz,huzeyfeayaz23@gmail.com,"Nov 09, 2020 09:37:57",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
468,Taha Cevher Naneci,tahananeci@marun.edu.tr,"Nov 09, 2020 09:36:50",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UC,
469,Taha Üzümcü,taha.tetsu@gmail.com,"Nov 09, 2020 09:38:24",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
470,Oğuzhan Toker,oguzhantoker@marun.edu.tr,"Nov 09, 2020 09:36:42",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
471,Gökberk Çelikmasat,gokberkcelikmasat@marun.edu.tr,"Nov 09, 2020 09:36:40",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
472,Hakan Özer,hakanozer@marun.edu.tr,"Nov 09, 2020 09:36:20",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
473,Aydın DUYGU,aydinduyku@marun.edu.tr,"Nov 09, 2020 09:36:24",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
474,Alperen Köker,alperenkoker@marun.edu.tr,"Nov 09, 2020 09:36:36",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
475,İrem Saygin,iremsaygin@marun.edu.tr,"Nov 09, 2020 09:36:44",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
476,Muhammed Enes Aktürk,menesakturk999@gmail.com,"Nov 09, 2020 09:37:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
477,Muhammad Ismail,muhammadismail@std.sehir.edu.tr,"Nov 09, 2020 09:38:27",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
478,Sevdenur Genç,sevdenurgenc@std.sehir.edu.tr,"Nov 09, 2020 09:38:34",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,Object,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
479,abdullah emre aydemir,emreaydemir@marun.edu.tr,"Nov 09, 2020 09:36:40",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
480,diala jubeh,dialajj@gmail.com,"Nov 09, 2020 09:36:11",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
481,Oğuzhan Erkol,oguzhannerkol@gmail.com,"Nov 09, 2020 09:38:23",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Encapsulation,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
482,Ahmad Asaad,ahmadasaad@marun.edu.tr,"Nov 09, 2020 09:36:52",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
483,Yunus Yıldırım,yunus.yildirim@marun.edu.tr,"Nov 09, 2020 09:37:11",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UC,
484,Orhan Fatih Bayazıt,fatihbayazit@marun.edu.tr,"Nov 09, 2020 09:37:42",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
485,berke şahin,berkesahin@marun.edu.tr,"Nov 09, 2020 09:38:13",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
486,Muhammet Yasin Tufan,mtufan@marun.edu.tr,"Nov 09, 2020 09:36:39",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
487,Taylan Rojen Döğer,totalwartaylan@gmail.com,"Nov 09, 2020 09:36:27",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
488,Berk Engin,berkengin@marun.edu.tr,"Nov 09, 2020 09:37:20",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
489,Melik Çağan Oduncuoğlu,caganoduncuoglu@marun.edu.tr,"Nov 09, 2020 09:36:15",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
490,Sameeh N O Kunbargi,sameehkunbargi@marun.edu.tr,"Nov 09, 2020 09:36:10",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
491,Ahmet TURGUT,aturgut@marun.edu.tr,"Nov 09, 2020 09:36:38",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
492,sinem onal,sinemonal@std.sehir.edu.tr,"Nov 09, 2020 09:38:10",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,Object,Which one is not a required property of OO languages?,Polymorphism,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
493,mehmet soykan mutlu,mehmetsoykanmutlu@gmail.com,"Nov 09, 2020 09:36:37",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
494,Ahmet Hamza Demir,ahmet.hamza@marun.edu.tr,"Nov 09, 2020 09:36:44",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
495,Muhammed Raşit Ayaz,rasitayaz@marun.edu.tr,"Nov 09, 2020 09:37:47",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
496,Can Karatepe,can.karatepe@marun.edu.tr,"Nov 09, 2020 09:35:42",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
497,Büşra Börekci,busraborekci51@gmail.com,"Nov 09, 2020 09:38:35",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Inheritance,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
498,Ahmet Onat Özalan,aozalan70@hotmail.com,"Nov 09, 2020 09:36:54",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
499,Furkan Akman,furkanakman@yaani.com,"Nov 09, 2020 09:35:39",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Inheritance,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
500,Vahap Gözenelioğlu,vahapgozenelioglu@marun.edu.tr,"Nov 09, 2020 09:37:41",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
501,Zeynep Alıcı,aliciizeynep@gmail.com,"Nov 09, 2020 09:35:57",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
502,Ali Batuhan Yamanarslan,batuhanyamanarslan@marun.edu.tr,"Nov 09, 2020 09:36:21",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
503,Anıl Şenay,anilsenay@marun.edu.tr,"Nov 09, 2020 09:36:43",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
504,BELGİN TAŞTAN,belgintastan@marun.edu.tr,"Nov 09, 2020 09:37:30",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
505,Merve Rana Kızıl,ranakizil@marun.edu.tr,"Nov 09, 2020 09:36:55",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,protected,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
506,Edanur Öztürk,edanur.ozturk@marun.edu.tr,"Nov 09, 2020 09:37:51",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
507,Ozan Yerli,ozanyerli@marun.edu.tr,"Nov 09, 2020 09:36:45",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
508,Mehmet Ali Yüksel,mehmetali864@marun.edu.tr,"Nov 09, 2020 09:37:06",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
509,Ahmet Önkol,ahmetonkol@marun.edu.tr,"Nov 09, 2020 09:38:19",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
510,Zülküf Orhun Özkaya,orhunozkaya@marun.edu.tr,"Nov 09, 2020 09:37:25",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,Object,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
511,Hamza Türkmen,hamzaturkmen@marun.edu.tr,"Nov 09, 2020 09:36:01",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
512,Muhammet Kürşat Açıkgöz,kursatacikgoz@marun.edu.tr,"Nov 09, 2020 09:37:19",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
513,Mustafa Kibaroğlu,mkibaroglu@marun.edu.tr,"Nov 09, 2020 09:37:19",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
514,Aykut Başyiğit,aykutbasyigit@marun.edu.tr,"Nov 09, 2020 09:37:48",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",universityCourse,
515,Shahzodakhon Rustamova,shahzodakhon.r@gmail.com,"Nov 09, 2020 09:37:50",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,False,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
516,Beyza Aydoğan,beyzaaydogan@marun.edu.tr,"Nov 09, 2020 09:37:48",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
517,Zeynep Naz Akyokuş,zeynep@akyokus.com,"Nov 09, 2020 09:38:27",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,static,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
518,Enes Garip,enesgarip@marun.edu.tr,"Nov 09, 2020 09:35:53",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
519,isra Nur Alperen,israalperen@marun.edu.tr,"Nov 09, 2020 09:37:50",An object variable such as "Student activeStudent"  may refer to different objects at different points in time,True,.... variable’s value is shared by all instances of a class,public,Which one is not a required property of OO languages?,Garbage collection,"Based on the Java naming convention, which one is a good name for a class ?",UniversityCourse,
